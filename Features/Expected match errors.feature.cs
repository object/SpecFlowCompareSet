// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.5.0.0
//      Runtime Version:4.0.30319.225
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace SpecFlowCompareSet.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.5.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Table comparison match errors")]
    public partial class TableComparisonMatchErrorsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Expected match errors.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Table comparison match errors", "In order to avoid writing my own collection comparison code\r\nAs a SpecFlow user\r\n" +
                    "I want to compare collections using different criteria", GenerationTargetLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Match error due to missing item")]
        public virtual void MatchErrorDueToMissingItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Match error due to missing item", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table1.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table1.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table1.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
#line 7
 testRunner.When("I have a collection", ((string)(null)), table1);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table2.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table2.AddRow(new string[] {
                        "ABBA",
                        "Arrival"});
            table2.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
#line 12
 testRunner.Then("it should match", ((string)(null)), table2);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Match error due to extra item")]
        public virtual void MatchErrorDueToExtraItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Match error due to extra item", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table3.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table3.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table3.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
#line 19
 testRunner.When("I have a collection", ((string)(null)), table3);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table4.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table4.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
            table4.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table4.AddRow(new string[] {
                        "ABBA",
                        "Arrival"});
#line 24
 testRunner.Then("it should match", ((string)(null)), table4);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exact match error due to missing item")]
        public virtual void ExactMatchErrorDueToMissingItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exact match error due to missing item", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table5.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table5.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table5.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
#line 32
 testRunner.When("I have a collection", ((string)(null)), table5);
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table6.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table6.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table6.AddRow(new string[] {
                        "ABBA",
                        "Arrival"});
#line 37
 testRunner.Then("it should exactly match", ((string)(null)), table6);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Exact match error due to incorrect order")]
        public virtual void ExactMatchErrorDueToIncorrectOrder()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Exact match error due to incorrect order", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table7.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table7.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table7.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
#line 44
 testRunner.When("I have a collection", ((string)(null)), table7);
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table8.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table8.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
            table8.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
#line 49
 testRunner.Then("it should exactly match", ((string)(null)), table8);
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Containment match error due to extra item")]
        public virtual void ContainmentMatchErrorDueToExtraItem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Containment match error due to extra item", ((string[])(null)));
#line 55
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table9.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table9.AddRow(new string[] {
                        "Pink Floyd",
                        "Animals"});
            table9.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
#line 56
 testRunner.When("I have a collection", ((string)(null)), table9);
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Album"});
            table10.AddRow(new string[] {
                        "Beatles",
                        "Rubber Soul"});
            table10.AddRow(new string[] {
                        "Muse",
                        "Absolution"});
            table10.AddRow(new string[] {
                        "ABBA",
                        "Arrival"});
#line 61
 testRunner.Then("it should contain all items", ((string)(null)), table10);
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
